# -*- coding: utf-8 -*-
"""Untitled34.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13IDvszCryYCmi0loJebFR9JDT0U5itRJ
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
from sklearn.linear_model import LogisticRegression

df=pd.read_csv("/content/Mobile_data.csv")

df.info()

df.select_dtypes("int").columns

df.isnull().sum()

def IQR(x):
    q1 = x.quantile(0.25)
    q3 = x.quantile(0.75)
    iqr = q3 - q1
    lf = q1 - (1.5*iqr)
    uf = q3+(1.5*iqr)
    print("LF",lf)
    print("UF",uf)

df.select_dtypes("int").columns

IQR(df["battery_power"])

df["battery_power"]=np.where(df["battery_power"]>2760.5,2760.5,df["battery_power"])

IQR(df["fc"])

IQR(df["int_memory"])

IQR(df["mobile_wt"])

IQR(df["n_cores"])

IQR(df["pc"])

IQR(df["px_height"])

IQR(df["px_width"])

IQR(df["pc"])

IQR(df["ram"])

IQR(df["sc_h"])

IQR(df["talk_time"])

IQR(df["Price"])

df["fc"]=np.where(df["fc"]>16.0,16.0,df["fc"])
df["mobile_wt"]=np.where(df["mobile_wt"]>261.5,261.5,df["mobile_wt"])
df["n_cores"]=np.where(df["n_cores"]>13,13,df["n_cores"])
df["pc"]=np.where(df["pc"]>30,30,df["pc"])
df["px_height"]=np.where(df["px_height"]>1944,1944,df["px_height"])
df["px_width"]=np.where(df["px_width"]>2770.375,2770.375,df["px_width"])
df["pc"]=np.where(df["pc"]>30.0,30.0,df["pc"])
df["ram"]=np.where(df["ram"]>5850,5850,df["ram"])
df["sc_h"]=np.where(df["sc_h"]>26.5,26.5,df["sc_h"])
df["talk_time"]=np.where(df["talk_time"]>31,31,df["talk_time"])
df["Price"]=np.where(df["Price"]>2.5,2.5,df["Price"])

df["int_memory"]=np.where(df["int_memory"]>96.0,96.0,df["int_memory"])

X=df.drop(columns="Price")
y=df["Price"]

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,
                                                random_state=88)

from sklearn.linear_model import LogisticRegression
log=LogisticRegression()
log.fit(X_train,y_train)
print("Train accuracy",log.score(X_train,y_train))
print("Test accuracy",log.score(X_test,y_test))

from sklearn.neighbors import KNeighborsClassifier

knn=KNeighborsClassifier()
knn.fit(X_train,y_train)
print("Train",knn.score(X_train,y_train))
print("Test",knn.score(X_test,y_test))

from sklearn.preprocessing import MinMaxScaler
scaler= MinMaxScaler

X_train_sc = Scalar.fit_transform(X_train)
X_test_sc=scalar.fit_transform(X_test)